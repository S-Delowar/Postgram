name: FullStack CI/CD

on:
  push:
    branches:
      - main

jobs:
  backend-test:
    name: Test Backend 
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: backend 
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - "5432:5432"

    env:
          USE_S3: FALSE
          AWS_ACCESS_KEY_ID: dummy
          AWS_SECRET_ACCESS_KEY: dummy
          AWS_S3_BUCKET_NAME: dummy
          AWS_REGION: dummy
          SUPERUSER_USERNAME: dummy
          SUPERUSER_EMAIL: dummy
          SUPERUSER_PASSWORD: dummy
          DB_NAME: postgres
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          ALLOWED_HOSTS: localhost
          DJANGO_SECRET_KEY: dummysecret
          CORS_ALLOWED_ORIGINS: http://localhost:3000
          OPENAI_API_KEY: dummy

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt 
      - name: Run migrations
        run: |
          python manage.py migrate
      - name: Run Pytest
        run: |
          pytest 

  build-and-push-backend:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: backend-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build and Push Docker Image 
        run: |
          cd backend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/postgram-api:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/postgram-api:latest
          
  deploy-backend:
    name: Deploy Backend to EC2
    runs-on: ubuntu-latest
    needs: build-and-push-backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy production files to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_SSH_KEY}}
          source: "/backend/docker-compose.prod.yml /backend/nginx.prod.conf"
          target: "/home/${{ secrets.AWS_EC2_USER }}/app/"
      
      - name: Deploy to EC2 
        uses: appleboy/ssh-action@v1.0.1
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_SSH_KEY}}
          script: |
            cd /home/${{ secrets.AWS_EC2_USER }}/app 

            echo "Creating .env file"
            echo "USE_S3=${{ secrets.USE_S3 }}" > .env
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
            echo "AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}" >> .env
            echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
            echo "SUPERUSER_USERNAME=${{ secrets.SUPERUSER_USERNAME }}" >> .env
            echo "SUPERUSER_EMAIL=${{ secrets.SUPERUSER_EMAIL }}" >> .env
            echo "SUPERUSER_PASSWORD=${{ secrets.SUPERUSER_PASSWORD }}" >> .env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
            echo "DB_USER=${{ secrets.DB_USER }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
            echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env
            echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
            echo "CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}" >> .env
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env

            echo "Pull docker image and run"

            docker-compose down
            docker-compose pull 
            docker-compose -f "/backend/docker-compose.prod.yml up -d


  deploy-frontend:
    name: Deploy Frontend to S3
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build React App
        run: npm run build

      - name: Deploy to S3
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SOURCE_DIR: frontend/build